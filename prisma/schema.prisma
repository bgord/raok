generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./sqlite.db?connection_limit=1"
}

model Event {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  stream    String
  version   Int
  payload   String

  @@index([stream])
}

model Newspaper {
  id          String    @id @default(uuid())
  status      String
  scheduledAt BigInt
  sentAt      BigInt?
  revision    Int       @default(0)
  articles    Article[]
}

model Article {
  id                            String     @id @default(uuid())
  url                           String
  source                        String
  status                        String
  createdAt                     BigInt
  title                         String?    @default("-")
  newspaperId                   String?
  estimatedReadingTimeInMinutes Int?
  revision                      Int        @default(0)
  rating                        Float?
  description                   String?
  Newspaper                     Newspaper? @relation(fields: [newspaperId], references: [id])

  @@index([status])
}

model Files {
  id     String  @id @default(uuid())
  name   String
  size   Int
  path   String
  sentAt BigInt?
}

model StatsKeyValue {
  id    String  @id @default(uuid())
  key   String? @unique(map: "sqlite_autoindex_StatsKeyValue_2")
  value Int?
}

model Source {
  id             String @id @default(uuid())
  url            String
  status         String
  createdAt      BigInt
  updatedAt      BigInt @default(0)
  processedUntil BigInt @default(0)
  revision       Int    @default(0)
  countValue     Int    @default(0)
  countStrategy  String @default("total_last_month")
}

model TokenRating {
  token          String  @id
  value          Int     @default(0)
  createdAt      BigInt
  updatedAt      BigInt  @default(0)
  dismissedUntil BigInt?
}

model TokenBlacklist {
  token     String @id
  createdAt BigInt
}

model RssCrawlerJob {
  id        String @id @default(uuid())
  url       String
  status    String
  sourceId  String
  createdAt BigInt
  updatedAt BigInt
  revision  Int    @default(0)
}

model User {
  id       String    @id
  email    String    @unique
  password String
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
